#!/usr/bin/env python
import datapackage
import os
import sys
import codecs
import unicodecsv as csv
from jsontableschema import infer
import glob
import json
from collections import OrderedDict
from prompts import prompts

'''
- do we have a data/ directory?
- does it have CSV files?
- does it have JSON files?
- does it have files with other types?
'''

from colorama import init, Fore, Back, Style
init(autoreset=True)


def print_prompts(name, format_strings=None):
    '''Print the prompt messages according to the list in prompts.py.'''
    print("")
    for line in prompts[name]:
        if format_strings and ("%s" in line or "%d" in line):
            print(line % format_strings)
        else:
            print(line)

# ensure we get the output in fixed order by specifying the descriptor argument
dp = datapackage.DataPackage(descriptor=OrderedDict())

# Splash screen :3
print
print Fore.YELLOW + "   ___    ___  "
print Fore.YELLOW + "   \__\__/__/  " + Fore.RESET + "Datapaka!"
print Fore.YELLOW + "   | ._. |  |  " + Fore.RESET + "Let's package this data!"
print Fore.YELLOW + "   |_____|__|  "
print

# Does data/ exist?
if not os.path.exists('data') or not os.path.isdir('data'):
    print "The data/ directory does not exist, can't do much here."
    print "Please create it and place some CSV files inside, then call me again."
    print
    sys.exit()

# Does datapackage.json exist?
if os.path.exists('datapackage.json'):
    print "There already is a datapackage.json file here."
    print "I will save the result of this in " + Style.BRIGHT + "datapackage-new.json" + Style.RESET_ALL + "."
    print

# Title
print_prompts('title')
dp.descriptor['title'] = raw_input(Style.BRIGHT + "? ")

# Slug ("name" field)
default_slug = dp.descriptor['title'].lower().replace(' ', '-')
if not dp.descriptor['title']:
    print_prompts('slug_notitle')
else:
    print_prompts('slug', default_slug)
dp.descriptor['name'] = raw_input(Style.BRIGHT + "? ") or default_slug

# Description
print_prompts('description')
dp.descriptor['description'] = raw_input(Style.BRIGHT + "? ")

# Version
default_version = "0.1.0"
print_prompts('version', default_version)
dp.descriptor['version'] = raw_input(Style.BRIGHT + "? ") or default_version

# Homepage
print_prompts('homepage')
h = raw_input(Style.BRIGHT + "? ")
if h:
    dp.descriptor['homepage'] = h

# License
default_license = "1"
print_prompts('license', default_license)
selected = raw_input(Style.BRIGHT + "? ") or default_license
dp.descriptor['license'] = prompts['license_options'][selected.strip()]

# Sources
dp.descriptor['sources'] = []
print_prompts('sources_intro')
another = True
while another:
    source_name = raw_input(Style.BRIGHT + "Source name? ")
    source_url = raw_input(Style.BRIGHT + "Source URL? ")
    dp.descriptor['sources'].append({"name": source_name, "web": source_url})
    print
    add_another = raw_input(Style.BRIGHT + "Add another source? [n] ")
    if add_another not in ("y", "Y"):
        another = False

# Contributors
dp.descriptor['contributors'] = []
print_prompts('contributors_intro')
another = True
while another:
    contrib_name = raw_input(Style.BRIGHT + "Contributor name? ")
    contrib_email = raw_input(Style.BRIGHT + "Contributor e-mail (optional)? ")
    contrib_url = raw_input(Style.BRIGHT + "Contributor URL (optional)? ")
    c = {"name": contrib_name}
    if contrib_email:
        c["email"] = contrib_email
    if contrib_url:
        c["web"] = contrib_url
    dp.descriptor['contributors'].append(c)
    print
    add_another = raw_input(Style.BRIGHT + "Add another contributor? [n] ")
    if add_another not in ("y", "Y"):
        another = False

# Keywords
print_prompts('keywords')
k = raw_input(Style.BRIGHT + "? ")
if k:
    dp.descriptor['keywords'] = [w.strip() for w in k.split(",")]


# CSV files
dp.descriptor['resources'] = []
csv_files = glob.glob('data/*.csv')
print
if len(csv_files) == 1:
    print "Found a single CSV file in the data/ dir. Easy!"
elif len(csv_files) != 0:
    print "Found %d CSV files in the data/ dir." % len(csv_files)
else:
    print "No CSV files found! I currently can't handle anything other than CSV. They'll fix me soon!"

for filepath in csv_files:
    print
    print "Let's now look at " + Style.BRIGHT + filepath + Style.RESET_ALL + "..."
    default_slug = filepath.split("/")[-1].split(".")[0]
    slug = raw_input("  Slug for this file? [%s]" % default_slug)
    resource_name = slug or default_slug
    with open(filepath, 'rb') as f:
        headers = [s.decode("utf-8") for s in f.readline().rstrip('\n').split(',')]
        values = csv.reader(f, encoding="utf-8")
        print "  Inferring column types, this might take a bit..."
        schema = infer(headers, values)
        fields = []
        for field in schema['fields']:
            fieldname = field['name']
            field['title'] = raw_input("  Human title for field '%s'? " % fieldname)
            field['description'] = raw_input("  Short description for field '%s'? " % fieldname)
            fields.append(field)

        dp.descriptor['resources'].append(
            {
                'name': resource_name,
                'path': filepath,
                'schema': fields
            }
        )

out = json.dumps(dp.to_dict(), ensure_ascii=False, encoding='utf-8', indent=2)

if not os.path.exists('datapackage.json'):
    outfilename = 'datapackage.json'
else:
    outfilename = 'datapackage-new.json'
with codecs.open(outfilename, 'w', 'utf-8') as f:
    f.write(out)

print "All done! File saved as " + Style.BRIGHT + outfilename + Style.RESET_ALL + ". Ta!"
